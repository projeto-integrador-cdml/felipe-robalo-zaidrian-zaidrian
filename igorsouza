Explica√ß√£o sobre o Projeto *Zaidrian

> Zaidrian ‚Äî  O seu assistente pessoal para organiza√ß√£o e foco em projetos. 

##  Minha Ideia Sobre o projeto !!! üí°

 O Zaidrian ajuda aos usu√°rios a planejar, executar e acompanhar os projetos pessoais e profissionais atrav√©s de tarefas focadas, notifica√ß√µes inteligentes e m√©tricas de produtividade.

* Funcionalidades principais:

1. Cria√ß√£o guiada de projetos: o assistente questiona e ajuda o usu√°rio a definir etapas, metas e prazos.

2. Tarefas de foco: o usu√°rio cria blocos de tempo dedicados ao projeto (pomodoro ou personalizados).

3. Controle de acesso e cobran√ßa:

   * Durante uma tarefa, o usu√°rio pode optar por ativar detec√ß√£o facial para comprovar a presen√ßa.
   * O usu√°rio pode permitir ou bloquear o  acesso a sites de redes sociais durante a tarefa.

4. Hist√≥rico e m√©tricas:

   *  A DuracÃßaÃÉo das tarefas ela √©  contabilizada por projeto.
   * O Resumo de progresso ao final de cada tarefa para autoavalia√ß√£o.

5. Notifica√ß√µes e lembretes: notifica√ß√µes configur√°veis que incentivam a regularidade e a conclus√£o de etapas.

---

## Tecnologias & Arquitetura üîß

* **Interface:** Flet (Python) ‚Äî app desktop/web leve.
* **Modelo de NLP:** BERT Q&A (Hugging Face) ‚Äî para interpreta√ß√£o de perguntas e respostas na interface.
* **Notifica√ß√µes:** Threading (Python) ‚Äî agendamento e envio local de notifica√ß√µes.
* **Detec√ß√£o facial:** OpenCV ‚Äî captura de v√≠deo e verifica√ß√£o b√°sica de presen√ßa.
* **Estrutura proposta:**

  * Frontend: Flet
  * Backend (local ou remoto): API em FastAPI (opcional)
  * Banco de dados: SQLite (in√≠cio) ‚Äî migr√°vel para PostgreSQL

---

## Instala√ß√£o (exemplo) ‚öôÔ∏è

```bash
# clonar reposit√≥rio
git clone https://github.com/seu-usuario/zaidrian.git
cd zaidrian

# criar venv e instalar depend√™ncias
python -m venv .venv
source .venv/bin/activate   # macOS / Linux
.\.venv\Scripts\activate  # Windows

pip install -r requirements.txt
```

### Depend√™ncias principais

* flet
* transformers
* torch (ou outra backend do HF)
* opencv-python
* sqlalchemy (se usar DB)

---

## Uso r√°pido ‚ñ∂Ô∏è

1. Ajuste as configura√ß√µes em `config.yaml` (ex.: caminhos de modelo, webcam, prefer√™ncias de notifica√ß√£o).
2. Execute a interface:

```bash
python app.py
```

3. Siga o assistente para criar um projeto e iniciar tarefas de foco.

---

## Como funciona a detec√ß√£o de presen√ßa ???

* A aplica√ß√£o pode capturar frames da webcam e aplicar um classificador simples para identificar se o usu√°rio est√° presente.
* Para maior robustez, recomendamos integrar um modelo pr√©-treinado de reconhecimento facial e armazenar apenas embeddings para comprova√ß√£o (aten√ß√£o √† privacidade!).

---

## Contribuindo

Contribui√ß√µes s√£o bem-vindas! Sugest√µes de como ajudar:

* Abrir issues com bugs ou features
* Submeter pull requests com melhorias (UI/UX, performance, testes)
* Melhorar a documenta√ß√£o e exemplos

Siga o fluxo padr√£o: fork ‚Üí branch com prefixo `feat/` ou `fix/` ‚Üí pull request.



## Time üë•

* Luiz Felipe Nast
* Jo√£o Anacleto
* Igor Souza
* Thiago Giesel

## Contato**

Para d√∫vidas e suporte: [Igor.souzas@sempreceub.com , luizfelipenast@sempreceub.com, joao.anacleto@sempreceub.com, thiago.giesel@sempreceub.com]



*Baseado no README original fornecido pelo time.*
